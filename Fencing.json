{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "04e552da",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:27.872555Z",
     "iopub.status.busy": "2021-11-10T18:36:27.871908Z",
     "iopub.status.idle": "2021-11-10T18:36:27.879999Z",
     "shell.execute_reply": "2021-11-10T18:36:27.880639Z",
     "shell.execute_reply.started": "2021-11-10T18:19:21.970599Z"
    },
    "papermill": {
     "duration": 0.061613,
     "end_time": "2021-11-10T18:36:27.880935",
     "exception": false,
     "start_time": "2021-11-10T18:36:27.819322",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/fie-fencing-womens-foil-data/all_womens_foil_bout_data_May_13_2021_cleaned.csv\n",
      "/kaggle/input/fie-fencing-womens-foil-data/all_womens_foil_fencer_rankings_data_May_13_2021_cleaned.csv\n",
      "/kaggle/input/fie-fencing-womens-foil-data/all_womens_foil_tournament_data_May_13_2021_cleaned.csv\n",
      "/kaggle/input/fie-fencing-womens-foil-data/all_womens_foil_fencer_bio_data_May_13_2021_cleaned.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8ed4749f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:27.961632Z",
     "iopub.status.busy": "2021-11-10T18:36:27.961016Z",
     "iopub.status.idle": "2021-11-10T18:36:28.117419Z",
     "shell.execute_reply": "2021-11-10T18:36:28.116855Z",
     "shell.execute_reply.started": "2021-11-10T18:19:22.743495Z"
    },
    "papermill": {
     "duration": 0.197394,
     "end_time": "2021-11-10T18:36:28.117569",
     "exception": false,
     "start_time": "2021-11-10T18:36:27.920175",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Load in all data frames from csv files\n",
    "tournaments_df = pd.read_csv('/kaggle/input/fie-fencing-womens-foil-data/all_womens_foil_tournament_data_May_13_2021_cleaned.csv')\n",
    "bouts_df = pd.read_csv('/kaggle/input/fie-fencing-womens-foil-data/all_womens_foil_bout_data_May_13_2021_cleaned.csv')\n",
    "fencers_bio_df = pd.read_csv('/kaggle/input/fie-fencing-womens-foil-data/all_womens_foil_fencer_bio_data_May_13_2021_cleaned.csv')\n",
    "init_rankings_df = pd.read_csv('/kaggle/input/fie-fencing-womens-foil-data/all_womens_foil_fencer_rankings_data_May_13_2021_cleaned.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c506c2ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:28.205061Z",
     "iopub.status.busy": "2021-11-10T18:36:28.204378Z",
     "iopub.status.idle": "2021-11-10T18:36:28.254202Z",
     "shell.execute_reply": "2021-11-10T18:36:28.253608Z",
     "shell.execute_reply.started": "2021-11-10T18:19:23.374623Z"
    },
    "papermill": {
     "duration": 0.097915,
     "end_time": "2021-11-10T18:36:28.254364",
     "exception": false,
     "start_time": "2021-11-10T18:36:28.156449",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "FENCERS_RANKINGS_DF_COLS = ['id', 'weapon', 'category', 'season', 'rank', 'points']\n",
    "\n",
    "# these fields are used to create a pandas multiIndex (heirachy as ordered)\n",
    "FENCERS_RANKINGS_MULTI_INDEX = ['id', 'weapon', 'category', 'season']\n",
    "\n",
    "def convert_list_to_dataframe_with_multi_index(list_of_data, column_names, index_names):\n",
    "    \"\"\"Creates dataframe with multiIndex (using index_names) from list_of_data\"\"\"\n",
    "    # create dataframe from list\n",
    "    dataframe = pd.DataFrame(data=list_of_data, columns=column_names)\n",
    "\n",
    "    # construct multiIndex (sort first to group by heirarchy)\n",
    "    idx_array = []\n",
    "    dataframe.sort_values(by=index_names, inplace=True)\n",
    "    for name in index_names:\n",
    "        idx_array.append(dataframe[name])\n",
    "    new_index = pd.MultiIndex.from_arrays(idx_array)\n",
    "\n",
    "    # convert to multi index and drop columns used to create multiIndex\n",
    "    dataframe.index = new_index\n",
    "    dataframe = dataframe.drop(columns=index_names)\n",
    "\n",
    "    return dataframe\n",
    "\n",
    "fencer_rankings_df = convert_list_to_dataframe_with_multi_index(\n",
    "        init_rankings_df.values.tolist(), FENCERS_RANKINGS_DF_COLS, FENCERS_RANKINGS_MULTI_INDEX)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9819eb91",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:28.334587Z",
     "iopub.status.busy": "2021-11-10T18:36:28.333874Z",
     "iopub.status.idle": "2021-11-10T18:36:28.355698Z",
     "shell.execute_reply": "2021-11-10T18:36:28.356198Z",
     "shell.execute_reply.started": "2021-11-10T18:19:23.950516Z"
    },
    "papermill": {
     "duration": 0.063496,
     "end_time": "2021-11-10T18:36:28.356380",
     "exception": false,
     "start_time": "2021-11-10T18:36:28.292884",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>competition_ID</th>\n",
       "      <th>season</th>\n",
       "      <th>name</th>\n",
       "      <th>category</th>\n",
       "      <th>country</th>\n",
       "      <th>start_date</th>\n",
       "      <th>end_date</th>\n",
       "      <th>weapon</th>\n",
       "      <th>gender</th>\n",
       "      <th>timezone</th>\n",
       "      <th>url</th>\n",
       "      <th>unique_ID</th>\n",
       "      <th>missing_results_flag</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>121</td>\n",
       "      <td>2021</td>\n",
       "      <td>Grand Prix</td>\n",
       "      <td>Senior</td>\n",
       "      <td>QATAR</td>\n",
       "      <td>2021-03-26</td>\n",
       "      <td>2021-03-28</td>\n",
       "      <td>Foil</td>\n",
       "      <td>Womens</td>\n",
       "      <td>Asia/Qatar</td>\n",
       "      <td>https://fie.org/competitions/2021/121</td>\n",
       "      <td>2021-121</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>41</td>\n",
       "      <td>2017</td>\n",
       "      <td>Tournoi international</td>\n",
       "      <td>Junior</td>\n",
       "      <td>GERMANY</td>\n",
       "      <td>2016-10-28</td>\n",
       "      <td>2016-10-28</td>\n",
       "      <td>Foil</td>\n",
       "      <td>Womens</td>\n",
       "      <td>Europe/Berlin</td>\n",
       "      <td>https://fie.org/competitions/2017/41</td>\n",
       "      <td>2017-41</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>800</td>\n",
       "      <td>2015</td>\n",
       "      <td>Championnats Panam√©ricains</td>\n",
       "      <td>Senior</td>\n",
       "      <td>CHILE</td>\n",
       "      <td>2015-04-17</td>\n",
       "      <td>2015-04-26</td>\n",
       "      <td>Foil</td>\n",
       "      <td>Womens</td>\n",
       "      <td>America/Santiago</td>\n",
       "      <td>https://fie.org/competitions/2015/800</td>\n",
       "      <td>2015-800</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>243</td>\n",
       "      <td>2019</td>\n",
       "      <td>Championnats du Monde</td>\n",
       "      <td>Senior</td>\n",
       "      <td>HUNGARY</td>\n",
       "      <td>2019-07-16</td>\n",
       "      <td>2019-07-19</td>\n",
       "      <td>Foil</td>\n",
       "      <td>Womens</td>\n",
       "      <td>Europe/Budapest</td>\n",
       "      <td>https://fie.org/competitions/2019/243</td>\n",
       "      <td>2019-243</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>237</td>\n",
       "      <td>2016</td>\n",
       "      <td>Championnats du monde juniors-cadets</td>\n",
       "      <td>Cadet</td>\n",
       "      <td>FRANCE</td>\n",
       "      <td>2016-04-01</td>\n",
       "      <td>2016-04-01</td>\n",
       "      <td>Foil</td>\n",
       "      <td>Womens</td>\n",
       "      <td>Europe/Paris</td>\n",
       "      <td>https://fie.org/competitions/2016/237</td>\n",
       "      <td>2016-237</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   competition_ID  season                                  name category  \\\n",
       "0             121    2021                            Grand Prix   Senior   \n",
       "1              41    2017                 Tournoi international   Junior   \n",
       "2             800    2015            Championnats Panam√©ricains   Senior   \n",
       "3             243    2019                 Championnats du Monde   Senior   \n",
       "4             237    2016  Championnats du monde juniors-cadets    Cadet   \n",
       "\n",
       "   country  start_date    end_date weapon  gender          timezone  \\\n",
       "0    QATAR  2021-03-26  2021-03-28   Foil  Womens        Asia/Qatar   \n",
       "1  GERMANY  2016-10-28  2016-10-28   Foil  Womens     Europe/Berlin   \n",
       "2    CHILE  2015-04-17  2015-04-26   Foil  Womens  America/Santiago   \n",
       "3  HUNGARY  2019-07-16  2019-07-19   Foil  Womens   Europe/Budapest   \n",
       "4   FRANCE  2016-04-01  2016-04-01   Foil  Womens      Europe/Paris   \n",
       "\n",
       "                                     url unique_ID  missing_results_flag  \n",
       "0  https://fie.org/competitions/2021/121  2021-121                   NaN  \n",
       "1   https://fie.org/competitions/2017/41   2017-41                   NaN  \n",
       "2  https://fie.org/competitions/2015/800  2015-800                   NaN  \n",
       "3  https://fie.org/competitions/2019/243  2019-243                   NaN  \n",
       "4  https://fie.org/competitions/2016/237  2016-237                   NaN  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tournaments_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f148e6e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:28.449318Z",
     "iopub.status.busy": "2021-11-10T18:36:28.448640Z",
     "iopub.status.idle": "2021-11-10T18:36:28.451417Z",
     "shell.execute_reply": "2021-11-10T18:36:28.451932Z",
     "shell.execute_reply.started": "2021-11-10T18:19:24.438372Z"
    },
    "papermill": {
     "duration": 0.056568,
     "end_time": "2021-11-10T18:36:28.452111",
     "exception": false,
     "start_time": "2021-11-10T18:36:28.395543",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fencer_ID</th>\n",
       "      <th>opp_ID</th>\n",
       "      <th>fencer_age</th>\n",
       "      <th>opp_age</th>\n",
       "      <th>fencer_score</th>\n",
       "      <th>opp_score</th>\n",
       "      <th>winner_ID</th>\n",
       "      <th>fencer_curr_pts</th>\n",
       "      <th>opp_curr_pts</th>\n",
       "      <th>tournament_ID</th>\n",
       "      <th>pool_ID</th>\n",
       "      <th>upset</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>36796</td>\n",
       "      <td>19574</td>\n",
       "      <td>23</td>\n",
       "      <td>28</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>36796</td>\n",
       "      <td>12.5</td>\n",
       "      <td>7.50</td>\n",
       "      <td>2021-121</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>2021-03-26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>36796</td>\n",
       "      <td>42147</td>\n",
       "      <td>23</td>\n",
       "      <td>19</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>36796</td>\n",
       "      <td>12.5</td>\n",
       "      <td>0.75</td>\n",
       "      <td>2021-121</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>2021-03-26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>36796</td>\n",
       "      <td>49116</td>\n",
       "      <td>23</td>\n",
       "      <td>21</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>36796</td>\n",
       "      <td>12.5</td>\n",
       "      <td>22.25</td>\n",
       "      <td>2021-121</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "      <td>2021-03-26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>36796</td>\n",
       "      <td>39631</td>\n",
       "      <td>23</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>36796</td>\n",
       "      <td>12.5</td>\n",
       "      <td>23.00</td>\n",
       "      <td>2021-121</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "      <td>2021-03-26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>36796</td>\n",
       "      <td>23447</td>\n",
       "      <td>23</td>\n",
       "      <td>27</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>23447</td>\n",
       "      <td>12.5</td>\n",
       "      <td>79.00</td>\n",
       "      <td>2021-121</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>2021-03-26</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   fencer_ID  opp_ID  fencer_age  opp_age  fencer_score  opp_score  winner_ID  \\\n",
       "0      36796   19574          23       28             5          1      36796   \n",
       "1      36796   42147          23       19             5          2      36796   \n",
       "2      36796   49116          23       21             5          2      36796   \n",
       "3      36796   39631          23       18             5          4      36796   \n",
       "4      36796   23447          23       27             4          5      23447   \n",
       "\n",
       "   fencer_curr_pts  opp_curr_pts tournament_ID  pool_ID  upset        date  \n",
       "0             12.5          7.50      2021-121        1  False  2021-03-26  \n",
       "1             12.5          0.75      2021-121        1  False  2021-03-26  \n",
       "2             12.5         22.25      2021-121        1   True  2021-03-26  \n",
       "3             12.5         23.00      2021-121        1   True  2021-03-26  \n",
       "4             12.5         79.00      2021-121        1  False  2021-03-26  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bouts_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c5f3d0a9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:28.549088Z",
     "iopub.status.busy": "2021-11-10T18:36:28.548179Z",
     "iopub.status.idle": "2021-11-10T18:36:28.564642Z",
     "shell.execute_reply": "2021-11-10T18:36:28.565286Z",
     "shell.execute_reply.started": "2021-11-10T18:19:24.960689Z"
    },
    "papermill": {
     "duration": 0.070326,
     "end_time": "2021-11-10T18:36:28.565507",
     "exception": false,
     "start_time": "2021-11-10T18:36:28.495181",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>name</th>\n",
       "      <th>country_code</th>\n",
       "      <th>country</th>\n",
       "      <th>hand</th>\n",
       "      <th>age</th>\n",
       "      <th>url</th>\n",
       "      <th>date_accessed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>28761</td>\n",
       "      <td>DVORKIN Mary</td>\n",
       "      <td>ISR</td>\n",
       "      <td>ISRAEL</td>\n",
       "      <td>Left</td>\n",
       "      <td>24</td>\n",
       "      <td>https://fie.org/athletes/28761</td>\n",
       "      <td>2021-05-13 21:42:17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>43803</td>\n",
       "      <td>SHI Yue</td>\n",
       "      <td>CHN</td>\n",
       "      <td>CHINA</td>\n",
       "      <td>Right</td>\n",
       "      <td>22</td>\n",
       "      <td>https://fie.org/athletes/43803</td>\n",
       "      <td>2021-05-13 21:35:13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>46080</td>\n",
       "      <td>TANG Nga Hei</td>\n",
       "      <td>MAC</td>\n",
       "      <td>MACAO, CHINA</td>\n",
       "      <td>Right</td>\n",
       "      <td>20</td>\n",
       "      <td>https://fie.org/athletes/46080</td>\n",
       "      <td>2021-05-13 21:46:21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>46481</td>\n",
       "      <td>WONAME Kelsey Victoria Afriyie</td>\n",
       "      <td>GHA</td>\n",
       "      <td>GHANA</td>\n",
       "      <td>Right</td>\n",
       "      <td>17</td>\n",
       "      <td>https://fie.org/athletes/46481</td>\n",
       "      <td>2021-05-13 21:48:14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>47075</td>\n",
       "      <td>BRECHERET Carolina</td>\n",
       "      <td>BRA</td>\n",
       "      <td>BRAZIL</td>\n",
       "      <td>Right</td>\n",
       "      <td>16</td>\n",
       "      <td>https://fie.org/athletes/47075</td>\n",
       "      <td>2021-05-13 21:50:07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      id                            name country_code       country   hand  \\\n",
       "0  28761                    DVORKIN Mary          ISR        ISRAEL   Left   \n",
       "1  43803                         SHI Yue          CHN         CHINA  Right   \n",
       "2  46080                    TANG Nga Hei          MAC  MACAO, CHINA  Right   \n",
       "3  46481  WONAME Kelsey Victoria Afriyie          GHA         GHANA  Right   \n",
       "4  47075              BRECHERET Carolina          BRA        BRAZIL  Right   \n",
       "\n",
       "   age                             url        date_accessed  \n",
       "0   24  https://fie.org/athletes/28761  2021-05-13 21:42:17  \n",
       "1   22  https://fie.org/athletes/43803  2021-05-13 21:35:13  \n",
       "2   20  https://fie.org/athletes/46080  2021-05-13 21:46:21  \n",
       "3   17  https://fie.org/athletes/46481  2021-05-13 21:48:14  \n",
       "4   16  https://fie.org/athletes/47075  2021-05-13 21:50:07  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fencers_bio_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f37c926a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:28.657834Z",
     "iopub.status.busy": "2021-11-10T18:36:28.657136Z",
     "iopub.status.idle": "2021-11-10T18:36:28.667125Z",
     "shell.execute_reply": "2021-11-10T18:36:28.667666Z",
     "shell.execute_reply.started": "2021-11-10T18:19:25.463792Z"
    },
    "papermill": {
     "duration": 0.055032,
     "end_time": "2021-11-10T18:36:28.667838",
     "exception": false,
     "start_time": "2021-11-10T18:36:28.612806",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>rank</th>\n",
       "      <th>points</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <th>weapon</th>\n",
       "      <th>category</th>\n",
       "      <th>season</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">164</th>\n",
       "      <th rowspan=\"4\" valign=\"top\">Foil</th>\n",
       "      <th rowspan=\"4\" valign=\"top\">Veterans</th>\n",
       "      <th>2016/2017</th>\n",
       "      <td>78</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016/2017</th>\n",
       "      <td>78</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017/2018</th>\n",
       "      <td>37</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017/2018</th>\n",
       "      <td>37</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>234</th>\n",
       "      <th>Foil</th>\n",
       "      <th>Senior</th>\n",
       "      <th>2007/2008</th>\n",
       "      <td>52</td>\n",
       "      <td>56.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               rank  points\n",
       "id  weapon category season                 \n",
       "164 Foil   Veterans 2016/2017    78     0.0\n",
       "                    2016/2017    78     0.0\n",
       "                    2017/2018    37     0.0\n",
       "                    2017/2018    37     0.0\n",
       "234 Foil   Senior   2007/2008    52    56.0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fencer_rankings_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8a5a815",
   "metadata": {
    "papermill": {
     "duration": 0.041514,
     "end_time": "2021-11-10T18:36:28.810631",
     "exception": false,
     "start_time": "2021-11-10T18:36:28.769117",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Metric For Fencer's Performance \n",
    "We want to compare the performance for fencers who fencer foil only compared to those that fencer another weapon as well. If an athlete fences epee or saber but doesn't have any FIE points/rank then this will not show up in the data. So we need to first identify a means of detecting what weapons an athlete competes with. Then we need to filter the fencers of interest and compute from the bouts_df a 'performance' metric. To compare these performance metrics we'll examine their distributions and use a suitable statistical test to determine if the populations perform differently. \n",
    "\n",
    "Steps: \n",
    " 1. Determine a detection method for multiple weapons \n",
    " 2. Filter fencers into groups based on their weapons\n",
    " 3. Define and compute a performance metric\n",
    " 4. Combine these fencers with their performance records\n",
    " 5. Examine the resulting performance metric distributions for the two populations\n",
    " 6. Perform a statistical test to see if fencing multiple weapons has an impact of foil bout performance"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ee4a986",
   "metadata": {
    "papermill": {
     "duration": 0.040595,
     "end_time": "2021-11-10T18:36:28.892972",
     "exception": false,
     "start_time": "2021-11-10T18:36:28.852377",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 1. Detection for Multiple Weapons \n",
    "\n",
    "**Goal**: Construct a criteria based on the data available for when an althete competes with multiple weapons. \n",
    "\n",
    "Since our dataset only includes results from FIE events, we will have to only include fencers that compete in another weapon at FIE tournaments. Since we would like to compare this to the population of only foil fencers from our data, which is already restricted to those that fence foil at FIE tournaments, this is a reasonable restriction to make. \n",
    "\n",
    "Let's take a look at the rankings data frame to see what information is reported. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9870f448",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:28.977982Z",
     "iopub.status.busy": "2021-11-10T18:36:28.977267Z",
     "iopub.status.idle": "2021-11-10T18:36:28.989328Z",
     "shell.execute_reply": "2021-11-10T18:36:28.989910Z",
     "shell.execute_reply.started": "2021-11-10T18:19:27.182585Z"
    },
    "papermill": {
     "duration": 0.05608,
     "end_time": "2021-11-10T18:36:28.990099",
     "exception": false,
     "start_time": "2021-11-10T18:36:28.934019",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>rank</th>\n",
       "      <th>points</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <th>weapon</th>\n",
       "      <th>category</th>\n",
       "      <th>season</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">164</th>\n",
       "      <th rowspan=\"4\" valign=\"top\">Foil</th>\n",
       "      <th rowspan=\"4\" valign=\"top\">Veterans</th>\n",
       "      <th>2016/2017</th>\n",
       "      <td>78</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016/2017</th>\n",
       "      <td>78</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017/2018</th>\n",
       "      <td>37</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017/2018</th>\n",
       "      <td>37</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">234</th>\n",
       "      <th rowspan=\"2\" valign=\"top\">Foil</th>\n",
       "      <th rowspan=\"2\" valign=\"top\">Senior</th>\n",
       "      <th>2007/2008</th>\n",
       "      <td>52</td>\n",
       "      <td>56.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008/2009</th>\n",
       "      <td>80</td>\n",
       "      <td>22.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"8\" valign=\"top\">1276</th>\n",
       "      <th rowspan=\"8\" valign=\"top\">Sabre</th>\n",
       "      <th rowspan=\"8\" valign=\"top\">Senior</th>\n",
       "      <th>2005/2006</th>\n",
       "      <td>72</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2005/2006</th>\n",
       "      <td>72</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2006/2007</th>\n",
       "      <td>306</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2006/2007</th>\n",
       "      <td>306</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007/2008</th>\n",
       "      <td>384</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007/2008</th>\n",
       "      <td>384</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008/2009</th>\n",
       "      <td>281</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008/2009</th>\n",
       "      <td>281</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1412</th>\n",
       "      <th>Foil</th>\n",
       "      <th>Senior</th>\n",
       "      <th>2002/2003</th>\n",
       "      <td>49</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                rank  points\n",
       "id   weapon category season                 \n",
       "164  Foil   Veterans 2016/2017    78     0.0\n",
       "                     2016/2017    78     0.0\n",
       "                     2017/2018    37     0.0\n",
       "                     2017/2018    37     0.0\n",
       "234  Foil   Senior   2007/2008    52    56.0\n",
       "                     2008/2009    80    22.0\n",
       "1276 Sabre  Senior   2005/2006    72    16.0\n",
       "                     2005/2006    72    16.0\n",
       "                     2006/2007   306     0.0\n",
       "                     2006/2007   306     0.0\n",
       "                     2007/2008   384     0.0\n",
       "                     2007/2008   384     0.0\n",
       "                     2008/2009   281     0.0\n",
       "                     2008/2009   281     0.0\n",
       "1412 Foil   Senior   2002/2003    49     4.0"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fencer_rankings_df.head(15)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "331ae6c7",
   "metadata": {
    "papermill": {
     "duration": 0.041285,
     "end_time": "2021-11-10T18:36:29.073578",
     "exception": false,
     "start_time": "2021-11-10T18:36:29.032293",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "From the first few athletes we see can make a few observations: \n",
    "   * A fencer can be listed as ranked for a weapon without earning any points\n",
    "   * Not all fencers in this list are ranked for foil (e.g. id 1276) despite appearing in the foil dataset \n",
    "  \n",
    "Let's examine this second point and verify that all fencers in the rankings dataframe have competed in an FIE foil event from the dataset. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "638e9547",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:29.165169Z",
     "iopub.status.busy": "2021-11-10T18:36:29.164185Z",
     "iopub.status.idle": "2021-11-10T18:36:29.176671Z",
     "shell.execute_reply": "2021-11-10T18:36:29.177142Z",
     "shell.execute_reply.started": "2021-11-10T18:19:28.526783Z"
    },
    "papermill": {
     "duration": 0.061795,
     "end_time": "2021-11-10T18:36:29.177326",
     "exception": false,
     "start_time": "2021-11-10T18:36:29.115531",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 2108 unique fencer IDs in bouts_df\n",
      "There are 2029 unique fencer IDs in fencer_rankings_df\n",
      "There are 0 fencer IDs in fencer_rankings_df with no bouts\n"
     ]
    }
   ],
   "source": [
    "# retreive all fencer IDs appearing in bouts_df \n",
    "all_bouts_fencer_ids = list(set(list(np.unique(bouts_df['fencer_ID'])) + list(np.unique(bouts_df['opp_ID']))))\n",
    "print(\"There are {} unique fencer IDs in bouts_df\".format(len(all_bouts_fencer_ids)))\n",
    "\n",
    "# retreive a pandas.Index of all fencer IDs appearing in fencer_rankings_df \n",
    "all_ranking_fencer_ids = list(fencer_rankings_df.index.unique(level='id'))\n",
    "print(\"There are {} unique fencer IDs in fencer_rankings_df\".format(len(all_ranking_fencer_ids)))\n",
    "\n",
    "# extract fencer IDs from rankings not appearing in bouts_df (if any)\n",
    "ranked_with_no_bouts = set(all_ranking_fencer_ids) - set(all_bouts_fencer_ids)\n",
    "print(\"There are {} fencer IDs in fencer_rankings_df with no bouts\".format(len(ranked_with_no_bouts)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6be4b4df",
   "metadata": {
    "papermill": {
     "duration": 0.042629,
     "end_time": "2021-11-10T18:36:29.261699",
     "exception": false,
     "start_time": "2021-11-10T18:36:29.219070",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now that we have verified that all fencers in the rankings dataframe have a bout associated to them in the bouts_df dataframe, let's verify that all bouts came from a foil event to ensure that all fencer IDs in the rankings table have competed in an FIE foil event. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "38e2fa2f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:29.349056Z",
     "iopub.status.busy": "2021-11-10T18:36:29.348393Z",
     "iopub.status.idle": "2021-11-10T18:36:29.421215Z",
     "shell.execute_reply": "2021-11-10T18:36:29.420312Z",
     "shell.execute_reply.started": "2021-11-10T18:19:29.670852Z"
    },
    "papermill": {
     "duration": 0.117681,
     "end_time": "2021-11-10T18:36:29.421377",
     "exception": false,
     "start_time": "2021-11-10T18:36:29.303696",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>weapon</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>49131</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Foil</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>49131</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       weapon\n",
       "count   49131\n",
       "unique      1\n",
       "top      Foil\n",
       "freq    49131"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Join bouts_df to tournaments_df and verify that all bouts have a \n",
    "# tournament (no NAs) and all tournaments correspond to foil events  \n",
    "bouts_df.join(tournaments_df.set_index(\"unique_ID\"), how=\"left\", on=\"tournament_ID\")[['weapon']].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "357d41d0",
   "metadata": {
    "papermill": {
     "duration": 0.042495,
     "end_time": "2021-11-10T18:36:29.506327",
     "exception": false,
     "start_time": "2021-11-10T18:36:29.463832",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The previous two cells verified that all fencers appearing in the rankings dataframe have fenced in a foil FIE competition. However not all fencers have a foil ranking/points. If we use rankings/points in other weapons, we will need to adjust our \"foil only\" fencers to also have rankings/points so our populations satisfy the same parameters. Since not all fencers who have competed in foil are \"ranked\" in foil, and fencers can be \"ranked\" without earning points, let's use the appearance of a \"ranking\" in a weapon in the rankings dataframe to indicate that a fencer competes with the weapon. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "63c79c4f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:29.594633Z",
     "iopub.status.busy": "2021-11-10T18:36:29.593915Z",
     "iopub.status.idle": "2021-11-10T18:36:29.637382Z",
     "shell.execute_reply": "2021-11-10T18:36:29.636741Z",
     "shell.execute_reply.started": "2021-11-10T18:19:30.702891Z"
    },
    "papermill": {
     "duration": 0.088598,
     "end_time": "2021-11-10T18:36:29.637522",
     "exception": false,
     "start_time": "2021-11-10T18:36:29.548924",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>weapon</th>\n",
       "      <th>Epee</th>\n",
       "      <th>Foil</th>\n",
       "      <th>Sabre</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>164</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>234</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1276</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1412</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1424</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "weapon   Epee   Foil  Sabre\n",
       "id                         \n",
       "164     False   True  False\n",
       "234     False   True  False\n",
       "1276    False  False   True\n",
       "1412    False   True  False\n",
       "1424    False   True  False"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create indicator columns for each weapon from rankings dataframe \n",
    "weapon_indicators = fencer_rankings_df.reset_index().pivot_table(\n",
    "        index = \"id\", \n",
    "        columns = \"weapon\",\n",
    "        values = \"rank\",\n",
    "        aggfunc = lambda x: not x.empty).fillna(False)\n",
    "weapon_indicators.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72b94773",
   "metadata": {
    "papermill": {
     "duration": 0.04357,
     "end_time": "2021-11-10T18:36:29.725689",
     "exception": false,
     "start_time": "2021-11-10T18:36:29.682119",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 2. Filter fencers into groups based on their weapons\n",
    "\n",
    "We can use these indicators to detemine which of the following categories a fencer falls in\n",
    "\n",
    " * fences only foil \n",
    " * fences foil and other weapon(s)\n",
    " * fences only non-foil weapon(s) \n",
    " * fences no weapons (i.e. appears in bouts but has no rankings) \n",
    " \n",
    "Since our bouts_df only contains foil bouts, we exclude the final category for symmetry and restrict ourselves to only fencer IDs appearing in the rankings dataframe. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d3eb96cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:29.815722Z",
     "iopub.status.busy": "2021-11-10T18:36:29.815012Z",
     "iopub.status.idle": "2021-11-10T18:36:29.831542Z",
     "shell.execute_reply": "2021-11-10T18:36:29.832138Z",
     "shell.execute_reply.started": "2021-11-10T18:19:31.614255Z"
    },
    "papermill": {
     "duration": 0.063074,
     "end_time": "2021-11-10T18:36:29.832317",
     "exception": false,
     "start_time": "2021-11-10T18:36:29.769243",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>weapon</th>\n",
       "      <th>Epee</th>\n",
       "      <th>Foil</th>\n",
       "      <th>Sabre</th>\n",
       "      <th>foil only</th>\n",
       "      <th>foil and</th>\n",
       "      <th>no foil</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>164</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>234</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1276</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1412</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1424</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "weapon   Epee   Foil  Sabre  foil only  foil and  no foil\n",
       "id                                                       \n",
       "164     False   True  False       True     False    False\n",
       "234     False   True  False       True     False    False\n",
       "1276    False  False   True      False     False     True\n",
       "1412    False   True  False       True     False    False\n",
       "1424    False   True  False       True     False    False"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create boolean indicators for the categories of interest \n",
    "weapon_indicators['foil only'] = ((weapon_indicators['Foil'] == True) & (weapon_indicators['Epee'] == False) & (weapon_indicators['Sabre'] == False))\n",
    "weapon_indicators['foil and']  = (weapon_indicators['Foil'] == True) & ((weapon_indicators['Epee'] == True) | (weapon_indicators['Sabre'] == True))\n",
    "weapon_indicators['no foil']   = (weapon_indicators['Foil'] == False)\n",
    "weapon_indicators.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b48cb026",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:29.924641Z",
     "iopub.status.busy": "2021-11-10T18:36:29.924006Z",
     "iopub.status.idle": "2021-11-10T18:36:29.938383Z",
     "shell.execute_reply": "2021-11-10T18:36:29.939159Z",
     "shell.execute_reply.started": "2021-11-10T18:19:31.998424Z"
    },
    "papermill": {
     "duration": 0.061989,
     "end_time": "2021-11-10T18:36:29.939419",
     "exception": false,
     "start_time": "2021-11-10T18:36:29.877430",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "foil only\n",
      "True         1918\n",
      "False         111\n",
      "dtype: int64\n",
      "foil and\n",
      "False       2000\n",
      "True          29\n",
      "dtype: int64\n",
      "no foil\n",
      "False      1947\n",
      "True         82\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(weapon_indicators[['foil only']].value_counts())\n",
    "print(weapon_indicators[['foil and']].value_counts())\n",
    "print(weapon_indicators[['no foil']].value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "affa6e0b",
   "metadata": {
    "papermill": {
     "duration": 0.043823,
     "end_time": "2021-11-10T18:36:30.028361",
     "exception": false,
     "start_time": "2021-11-10T18:36:29.984538",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "From the counts above we see that 1918 fencers are only ranked in foil, 29 are ranked in foil and another weapon(s), and 82 are ranked in only other weapon(s). "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57405b03",
   "metadata": {
    "papermill": {
     "duration": 0.043223,
     "end_time": "2021-11-10T18:36:30.115065",
     "exception": false,
     "start_time": "2021-11-10T18:36:30.071842",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 3. Define and compute a performance metric\n",
    "\n",
    "As an initial metric, let's use win percentage as a metric for performance in pools. This aligns will the usage of pools in a fencing tournament, since the number of wins is the most important factor in determining placement going into the direct elimination round. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c20f67b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:30.206832Z",
     "iopub.status.busy": "2021-11-10T18:36:30.206160Z",
     "iopub.status.idle": "2021-11-10T18:36:30.218042Z",
     "shell.execute_reply": "2021-11-10T18:36:30.218693Z",
     "shell.execute_reply.started": "2021-11-10T18:19:33.446302Z"
    },
    "papermill": {
     "duration": 0.060013,
     "end_time": "2021-11-10T18:36:30.218882",
     "exception": false,
     "start_time": "2021-11-10T18:36:30.158869",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fencer_ID</th>\n",
       "      <th>opp_ID</th>\n",
       "      <th>winner_ID</th>\n",
       "      <th>fencer_won</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>36796</td>\n",
       "      <td>19574</td>\n",
       "      <td>36796</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>36796</td>\n",
       "      <td>42147</td>\n",
       "      <td>36796</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>36796</td>\n",
       "      <td>49116</td>\n",
       "      <td>36796</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>36796</td>\n",
       "      <td>39631</td>\n",
       "      <td>36796</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>36796</td>\n",
       "      <td>23447</td>\n",
       "      <td>23447</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   fencer_ID  opp_ID  winner_ID  fencer_won\n",
       "0      36796   19574      36796        True\n",
       "1      36796   42147      36796        True\n",
       "2      36796   49116      36796        True\n",
       "3      36796   39631      36796        True\n",
       "4      36796   23447      23447       False"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bouts_IDs = bouts_df.loc[:,['fencer_ID','opp_ID','winner_ID']]\n",
    "bouts_IDs['fencer_won'] = bouts_IDs['fencer_ID'] == bouts_IDs['winner_ID']\n",
    "temp = bouts_IDs.head()\n",
    "temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "36fd9d3a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:30.310411Z",
     "iopub.status.busy": "2021-11-10T18:36:30.309738Z",
     "iopub.status.idle": "2021-11-10T18:36:30.345440Z",
     "shell.execute_reply": "2021-11-10T18:36:30.345907Z",
     "shell.execute_reply.started": "2021-11-10T18:19:34.045791Z"
    },
    "papermill": {
     "duration": 0.082841,
     "end_time": "2021-11-10T18:36:30.346080",
     "exception": false,
     "start_time": "2021-11-10T18:36:30.263239",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>win_count</th>\n",
       "      <th>bout_count</th>\n",
       "      <th>win_percentage</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fencer_ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>164</th>\n",
       "      <td>5</td>\n",
       "      <td>16</td>\n",
       "      <td>0.312500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>234</th>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1006</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1276</th>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1412</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0.333333</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           win_count  bout_count  win_percentage\n",
       "fencer_ID                                       \n",
       "164                5          16        0.312500\n",
       "234                6           6        1.000000\n",
       "1006               0           5        0.000000\n",
       "1276               0           6        0.000000\n",
       "1412               1           3        0.333333"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create a dataframe that double counts bouts so that each fencer appears as \"fencer_ID\" in every bout they fenced \n",
    "fencer_ID = bouts_df[['fencer_ID','winner_ID']]\n",
    "opponent_ID = bouts_df[['opp_ID','winner_ID']].rename(columns={\"opp_ID\":\"fencer_ID\"})\n",
    "all_bouts = pd.concat([fencer_ID,opponent_ID]) \n",
    "\n",
    "# now compute the wins and total bout count for each fencer ID \n",
    "all_bouts['fencer_won'] = all_bouts['fencer_ID'] == all_bouts['winner_ID']\n",
    "wins_by_id       = all_bouts[['fencer_ID','fencer_won']].groupby('fencer_ID').sum().rename(columns = {'fencer_won':'win_count'})\n",
    "bout_count_by_id = all_bouts[['fencer_ID','fencer_won']].groupby('fencer_ID').count().rename(columns = {'fencer_won':'bout_count'})\n",
    "performance_stats = wins_by_id.join(bout_count_by_id, how=\"inner\")\n",
    "performance_stats['win_percentage'] = performance_stats['win_count']/performance_stats['bout_count']\n",
    "performance_stats.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f41cb4b",
   "metadata": {
    "papermill": {
     "duration": 0.044414,
     "end_time": "2021-11-10T18:36:30.435109",
     "exception": false,
     "start_time": "2021-11-10T18:36:30.390695",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "###  4. Combine these fencers with their performance records\n",
    "\n",
    "Now we want to combine these the indicators for these fencers with their bout performance from the bouts_df. Since a fencer's ID can appear in either `fencer_ID` or `opp_ID` in the bouts dataframe we need to..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "eae8324e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:30.530564Z",
     "iopub.status.busy": "2021-11-10T18:36:30.529525Z",
     "iopub.status.idle": "2021-11-10T18:36:30.546201Z",
     "shell.execute_reply": "2021-11-10T18:36:30.546822Z",
     "shell.execute_reply.started": "2021-11-10T18:19:35.145568Z"
    },
    "papermill": {
     "duration": 0.067239,
     "end_time": "2021-11-10T18:36:30.546994",
     "exception": false,
     "start_time": "2021-11-10T18:36:30.479755",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>foil only</th>\n",
       "      <th>foil and</th>\n",
       "      <th>no foil</th>\n",
       "      <th>win_count</th>\n",
       "      <th>bout_count</th>\n",
       "      <th>win_percentage</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fencer_ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>164</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>5</td>\n",
       "      <td>16</td>\n",
       "      <td>0.312500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>234</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1276</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1412</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1424</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>6</td>\n",
       "      <td>12</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           foil only  foil and  no foil  win_count  bout_count  win_percentage\n",
       "fencer_ID                                                                     \n",
       "164             True     False    False          5          16        0.312500\n",
       "234             True     False    False          6           6        1.000000\n",
       "1276           False     False     True          0           6        0.000000\n",
       "1412            True     False    False          1           3        0.333333\n",
       "1424            True     False    False          6          12        0.500000"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# join performance dataframe with the weapon indicators dataframe \n",
    "fencer_stats = weapon_indicators.merge(performance_stats.reset_index(), \n",
    "                                       how=\"inner\", left_on=\"id\", \n",
    "                                       right_on=\"fencer_ID\").set_index('fencer_ID').drop(columns=['Epee','Foil','Sabre'])\n",
    "fencer_stats.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a218094b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:30.643103Z",
     "iopub.status.busy": "2021-11-10T18:36:30.642129Z",
     "iopub.status.idle": "2021-11-10T18:36:30.651962Z",
     "shell.execute_reply": "2021-11-10T18:36:30.652594Z",
     "shell.execute_reply.started": "2021-11-10T18:19:35.831263Z"
    },
    "papermill": {
     "duration": 0.060386,
     "end_time": "2021-11-10T18:36:30.652790",
     "exception": false,
     "start_time": "2021-11-10T18:36:30.592404",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3       1\n",
       "4      13\n",
       "5     144\n",
       "6     409\n",
       "9       2\n",
       "10     33\n",
       "11    100\n",
       "12    173\n",
       "13      3\n",
       "14      4\n",
       "Name: bout_count, dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fencer_stats['bout_count'].describe()\n",
    "fencer_stats['bout_count'].value_counts().sort_index().head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d8523bb",
   "metadata": {
    "papermill": {
     "duration": 0.045167,
     "end_time": "2021-11-10T18:36:30.743697",
     "exception": false,
     "start_time": "2021-11-10T18:36:30.698530",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "###  5. Examine the resulting performance metric distributions for the two populations\n",
    "\n",
    "First let's examine the spread of this peformance metric for each of the weapon classifications computed above. We will use density histograms within each category. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "413ac4fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:30.861485Z",
     "iopub.status.busy": "2021-11-10T18:36:30.843724Z",
     "iopub.status.idle": "2021-11-10T18:36:31.708688Z",
     "shell.execute_reply": "2021-11-10T18:36:31.708057Z",
     "shell.execute_reply.started": "2021-11-10T18:19:38.351854Z"
    },
    "papermill": {
     "duration": 0.919527,
     "end_time": "2021-11-10T18:36:31.708825",
     "exception": false,
     "start_time": "2021-11-10T18:36:30.789298",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1440x360 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "fig, ax = plt.subplots(1,4, figsize=(20,5))\n",
    "\n",
    "fig.suptitle(\"Density Histograms of Pools Win Percentages by Fencer Weapon Classification\");\n",
    "bins = 15\n",
    "fencer_stats['win_percentage'].hist(bins=bins, density=True, ax=ax[0]);\n",
    "ax[0].set_title(\"All Fencers\");\n",
    "ax[0].set_xlabel(\"Win Percentage\");\n",
    "ax[0].set_ylabel(\"Density\");\n",
    "fencer_stats[fencer_stats['foil only']==True]['win_percentage'].hist(bins=bins, density=True, ax=ax[1]);\n",
    "ax[1].set_title(\"Foil Only\");\n",
    "ax[1].set_xlabel(\"Win Percentage\");\n",
    "fencer_stats[fencer_stats['foil and']==True]['win_percentage'].hist(bins=bins, density=True, ax=ax[2]);\n",
    "ax[2].set_title(\"Foil and\");\n",
    "ax[2].set_xlabel(\"Win Percentage\");\n",
    "fencer_stats[fencer_stats['no foil']==True]['win_percentage'].hist(bins=bins, density=True, ax=ax[3]);\n",
    "ax[3].set_title(\"No Foil\");\n",
    "ax[3].set_xlabel(\"Win Percentage\");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41dd3591",
   "metadata": {
    "papermill": {
     "duration": 0.04681,
     "end_time": "2021-11-10T18:36:31.803401",
     "exception": false,
     "start_time": "2021-11-10T18:36:31.756591",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now let's compute some descriptive statistics of our data. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "470dffd4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:31.903038Z",
     "iopub.status.busy": "2021-11-10T18:36:31.902302Z",
     "iopub.status.idle": "2021-11-10T18:36:31.914918Z",
     "shell.execute_reply": "2021-11-10T18:36:31.915581Z",
     "shell.execute_reply.started": "2021-11-10T18:19:39.597345Z"
    },
    "papermill": {
     "duration": 0.065824,
     "end_time": "2021-11-10T18:36:31.915757",
     "exception": false,
     "start_time": "2021-11-10T18:36:31.849933",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Foil Only\n",
      "count    1918.000000\n",
      "mean        0.361183\n",
      "std         0.240135\n",
      "min         0.000000\n",
      "25%         0.166667\n",
      "50%         0.333333\n",
      "75%         0.544541\n",
      "max         1.000000\n",
      "Name: win_percentage, dtype: float64\n",
      "Foil And\n",
      "count    29.000000\n",
      "mean      0.330898\n",
      "std       0.277322\n",
      "min       0.000000\n",
      "25%       0.100000\n",
      "50%       0.315789\n",
      "75%       0.445378\n",
      "max       0.931034\n",
      "Name: win_percentage, dtype: float64\n",
      "No Foil\n",
      "count    82.000000\n",
      "mean      0.375083\n",
      "std       0.292734\n",
      "min       0.000000\n",
      "25%       0.166667\n",
      "50%       0.314787\n",
      "75%       0.623684\n",
      "max       1.000000\n",
      "Name: win_percentage, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "for cat in [\"foil only\",\"foil and\",\"no foil\"]:\n",
    "    print(cat.title())\n",
    "    print(fencer_stats[fencer_stats[cat]==True]['win_percentage'].describe())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7af5e71f",
   "metadata": {
    "papermill": {
     "duration": 0.046727,
     "end_time": "2021-11-10T18:36:32.009618",
     "exception": false,
     "start_time": "2021-11-10T18:36:31.962891",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The means, standard deviations, and medians all seem fairly similar across the three groups. Let's now try visualizing with a violin plot. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d7f1e642",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:32.118587Z",
     "iopub.status.busy": "2021-11-10T18:36:32.110695Z",
     "iopub.status.idle": "2021-11-10T18:36:32.121502Z",
     "shell.execute_reply": "2021-11-10T18:36:32.122104Z",
     "shell.execute_reply.started": "2021-11-10T18:19:41.630433Z"
    },
    "papermill": {
     "duration": 0.064539,
     "end_time": "2021-11-10T18:36:32.122274",
     "exception": false,
     "start_time": "2021-11-10T18:36:32.057735",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "fencer_ID\n",
       "164      foil only\n",
       "234      foil only\n",
       "1276       no foil\n",
       "1412     foil only\n",
       "1424     foil only\n",
       "           ...    \n",
       "53107    foil only\n",
       "53148    foil only\n",
       "53151    foil only\n",
       "53161    foil only\n",
       "53162    foil only\n",
       "Length: 2029, dtype: object"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fencer_stats[['foil only','foil and','no foil']].idxmax(axis='columns')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "afc7a757",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:32.229967Z",
     "iopub.status.busy": "2021-11-10T18:36:32.229140Z",
     "iopub.status.idle": "2021-11-10T18:36:32.232456Z",
     "shell.execute_reply": "2021-11-10T18:36:32.232950Z",
     "shell.execute_reply.started": "2021-11-10T18:19:42.174123Z"
    },
    "papermill": {
     "duration": 0.063264,
     "end_time": "2021-11-10T18:36:32.233119",
     "exception": false,
     "start_time": "2021-11-10T18:36:32.169855",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>foil only</th>\n",
       "      <th>foil and</th>\n",
       "      <th>no foil</th>\n",
       "      <th>win_count</th>\n",
       "      <th>bout_count</th>\n",
       "      <th>win_percentage</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fencer_ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>164</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>5</td>\n",
       "      <td>16</td>\n",
       "      <td>0.312500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>234</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1276</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1412</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1424</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>6</td>\n",
       "      <td>12</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           foil only  foil and  no foil  win_count  bout_count  win_percentage\n",
       "fencer_ID                                                                     \n",
       "164             True     False    False          5          16        0.312500\n",
       "234             True     False    False          6           6        1.000000\n",
       "1276           False     False     True          0           6        0.000000\n",
       "1412            True     False    False          1           3        0.333333\n",
       "1424            True     False    False          6          12        0.500000"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fencer_stats.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "5fb86e31",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:32.333631Z",
     "iopub.status.busy": "2021-11-10T18:36:32.332608Z",
     "iopub.status.idle": "2021-11-10T18:36:33.628888Z",
     "shell.execute_reply": "2021-11-10T18:36:33.628005Z",
     "shell.execute_reply.started": "2021-11-10T18:19:43.036923Z"
    },
    "papermill": {
     "duration": 1.34724,
     "end_time": "2021-11-10T18:36:33.629046",
     "exception": false,
     "start_time": "2021-11-10T18:36:32.281806",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "\n",
    "fencer_stats['weapon_category'] = fencer_stats[['foil only','foil and','no foil']].idxmax(axis='columns')\n",
    "fencer_stats\n",
    "ax = sns.violinplot(data=fencer_stats[['weapon_category','win_percentage']],\n",
    "                    x=\"weapon_category\", y=\"win_percentage\", inner=\"quartile\");\n",
    "ax.set_xlabel(\"Weapon Category\");\n",
    "ax.set_ylabel(\"Win Percentage\");\n",
    "ax.set_title(\"Violin Plots of Win Percentages by Weapon Classification\");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea83130d",
   "metadata": {
    "papermill": {
     "duration": 0.048615,
     "end_time": "2021-11-10T18:36:33.726861",
     "exception": false,
     "start_time": "2021-11-10T18:36:33.678246",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Qualitatively, we see that the medians (thick dashed line) do line up for each of the categories. However the 25th and 75th percentiles for the \"foil and\" category (fencers ranked in both foil and another weapon) are lower than the corresponding percentiles for the other two. \n",
    "Comparing the density curves, we see that \"foil only\" has a much more jagged curve than the others. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d6e979d",
   "metadata": {
    "papermill": {
     "duration": 0.04859,
     "end_time": "2021-11-10T18:36:33.824434",
     "exception": false,
     "start_time": "2021-11-10T18:36:33.775844",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "###  6. Perform a statistical test to see if fencing multiple weapons has an impact of foil bout performance\n",
    "\n",
    "To test whether the labels \"foil only\", \"foil and\" and \"no foil\" are independent from a fencer's performance in pools we will write a function to run a permutation test on the difference of means and compute the resulting p-values for each pair. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "ce8cafb8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:33.926890Z",
     "iopub.status.busy": "2021-11-10T18:36:33.926186Z",
     "iopub.status.idle": "2021-11-10T18:36:33.935247Z",
     "shell.execute_reply": "2021-11-10T18:36:33.935800Z",
     "shell.execute_reply.started": "2021-11-10T18:19:46.607017Z"
    },
    "papermill": {
     "duration": 0.061284,
     "end_time": "2021-11-10T18:36:33.935971",
     "exception": false,
     "start_time": "2021-11-10T18:36:33.874687",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def permutation_test(group1, group2, fun, repetitions=1000, one_sided=True):\n",
    "    \"\"\"\n",
    "    Group 1 and Group 2 are pandas.Series \n",
    "    \"\"\"  \n",
    "    all_data = pd.concat([group1, group2]).reset_index(drop=True)\n",
    "    \n",
    "    obs_stat = fun(group1, group2)\n",
    "    perm_stats = []\n",
    "    \n",
    "    for i in range(repetitions):\n",
    "        sample1 = all_data.sample(group1.size)\n",
    "        sample2 = all_data.loc[all_data.index.difference(sample1.index)]\n",
    "        perm_stat = fun(sample1, sample2)\n",
    "        perm_stats.append(perm_stat)\n",
    "    if one_sided:\n",
    "        p_value = sum(x >= abs(obs_stat) for x in perm_stats)/repetitions\n",
    "    else:\n",
    "        p_value = (sum(x >= abs(obs_stat) for x in perm_stats) + \n",
    "                   sum(x <= -abs(obs_stat) for x in perm_stats))/repetitions\n",
    "    \n",
    "    return (obs_stat, perm_stats, p_value)\n",
    "\n",
    "def mean_diff(group1, group2):\n",
    "    \"\"\"\n",
    "    Group 1 and Group 2 are pandas.Series \n",
    "    \"\"\" \n",
    "    return np.mean(group1) - np.mean(group2)\n",
    "\n",
    "# #Tests for the permutation function\n",
    "#list2 = pd.Series([1,5,3])\n",
    "#list1 = pd.Series([4,2,6])\n",
    "#results = permutation_test(list1, list2, mean_diff, 10)\n",
    "#results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a04e7d29",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:34.039662Z",
     "iopub.status.busy": "2021-11-10T18:36:34.038966Z",
     "iopub.status.idle": "2021-11-10T18:36:34.043795Z",
     "shell.execute_reply": "2021-11-10T18:36:34.044290Z",
     "shell.execute_reply.started": "2021-11-10T18:19:48.365235Z"
    },
    "papermill": {
     "duration": 0.057871,
     "end_time": "2021-11-10T18:36:34.044470",
     "exception": false,
     "start_time": "2021-11-10T18:36:33.986599",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Split out the groups to perform permutation testing on \n",
    "foil_only_win_percentages = fencer_stats.loc[fencer_stats[\"foil only\"],\"win_percentage\"]\n",
    "foil_and_win_percentages = fencer_stats.loc[fencer_stats[\"foil and\"],\"win_percentage\"]\n",
    "no_foil_win_percentages = fencer_stats.loc[fencer_stats[\"no foil\"],\"win_percentage\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69bf5a7e",
   "metadata": {
    "papermill": {
     "duration": 0.048696,
     "end_time": "2021-11-10T18:36:34.142602",
     "exception": false,
     "start_time": "2021-11-10T18:36:34.093906",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now that we have our groups we run the permutation test on each pair. Since we have multiple testing we will also use a Bonferroni correction to get adjusted p-values. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "bda53531",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:34.246026Z",
     "iopub.status.busy": "2021-11-10T18:36:34.245326Z",
     "iopub.status.idle": "2021-11-10T18:36:36.943719Z",
     "shell.execute_reply": "2021-11-10T18:36:36.942946Z",
     "shell.execute_reply.started": "2021-11-10T18:19:50.323924Z"
    },
    "papermill": {
     "duration": 2.751234,
     "end_time": "2021-11-10T18:36:36.943915",
     "exception": false,
     "start_time": "2021-11-10T18:36:34.192681",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P-value from permutation test (foil only vs no foil): 0.8220000000000001\n",
      "P-value from permutation test (foil only vs foil and): 0.654\n",
      "P-value from permutation test (foil and vs no foil): 0.786\n"
     ]
    }
   ],
   "source": [
    "results1 = permutation_test(foil_only_win_percentages, no_foil_win_percentages, mean_diff)\n",
    "print(\"P-value from permutation test (foil only vs no foil):\", 3*results1[2])\n",
    "\n",
    "results2 = permutation_test(foil_only_win_percentages, foil_and_win_percentages, mean_diff)\n",
    "print(\"P-value from permutation test (foil only vs foil and):\", 3*results2[2])\n",
    "\n",
    "results3 = permutation_test(foil_and_win_percentages, no_foil_win_percentages, mean_diff)\n",
    "print(\"P-value from permutation test (foil and vs no foil):\", 3*results3[2])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21d19b53",
   "metadata": {
    "papermill": {
     "duration": 0.051731,
     "end_time": "2021-11-10T18:36:37.046924",
     "exception": false,
     "start_time": "2021-11-10T18:36:36.995193",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Conclusions \n",
    "\n",
    "As we suspected from the highly overlapping violin plots, the p-values for these permutation tests are too high to reject the null hypothesis that a fencer's weapon classification (determined by which weapons they are ranked at the international level) has no impact on a fencer's performance in pools during international foil events (measured by percentage of bouts won). "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69b42415",
   "metadata": {
    "papermill": {
     "duration": 0.049868,
     "end_time": "2021-11-10T18:36:37.146964",
     "exception": false,
     "start_time": "2021-11-10T18:36:37.097096",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Modify Weapon Classification\n",
    "\n",
    "Steps: \n",
    " 1. **Modify the detection method for multiple weapons**\n",
    " 2. Filter fencers into groups based on their weapons\n",
    " 3. Define and compute a performance metric\n",
    " 4. Combine these fencers with their performance records\n",
    " 5. Examine the resulting performance metric distributions for the two populations\n",
    " 6. Perform a statistical test to see if fencing multiple weapons has an impact of foil bout performance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "fe7267f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:37.254998Z",
     "iopub.status.busy": "2021-11-10T18:36:37.254014Z",
     "iopub.status.idle": "2021-11-10T18:36:37.263815Z",
     "shell.execute_reply": "2021-11-10T18:36:37.264436Z",
     "shell.execute_reply.started": "2021-11-10T18:19:52.978614Z"
    },
    "papermill": {
     "duration": 0.067528,
     "end_time": "2021-11-10T18:36:37.264621",
     "exception": false,
     "start_time": "2021-11-10T18:36:37.197093",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>rank</th>\n",
       "      <th>points</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <th>weapon</th>\n",
       "      <th>category</th>\n",
       "      <th>season</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">234</th>\n",
       "      <th rowspan=\"2\" valign=\"top\">Foil</th>\n",
       "      <th rowspan=\"2\" valign=\"top\">Senior</th>\n",
       "      <th>2007/2008</th>\n",
       "      <td>52</td>\n",
       "      <td>56.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008/2009</th>\n",
       "      <td>80</td>\n",
       "      <td>22.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">1276</th>\n",
       "      <th rowspan=\"2\" valign=\"top\">Sabre</th>\n",
       "      <th rowspan=\"2\" valign=\"top\">Senior</th>\n",
       "      <th>2005/2006</th>\n",
       "      <td>72</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2005/2006</th>\n",
       "      <td>72</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1412</th>\n",
       "      <th>Foil</th>\n",
       "      <th>Senior</th>\n",
       "      <th>2002/2003</th>\n",
       "      <td>49</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                rank  points\n",
       "id   weapon category season                 \n",
       "234  Foil   Senior   2007/2008    52    56.0\n",
       "                     2008/2009    80    22.0\n",
       "1276 Sabre  Senior   2005/2006    72    16.0\n",
       "                     2005/2006    72    16.0\n",
       "1412 Foil   Senior   2002/2003    49     4.0"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# filter out all 'points=0.0' from this df \n",
    "pts_only_fencer_rankings_df = fencer_rankings_df[fencer_rankings_df['points'] != 0]\n",
    "pts_only_fencer_rankings_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "9e1b2afe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:37.371699Z",
     "iopub.status.busy": "2021-11-10T18:36:37.371028Z",
     "iopub.status.idle": "2021-11-10T18:36:37.454293Z",
     "shell.execute_reply": "2021-11-10T18:36:37.454800Z",
     "shell.execute_reply.started": "2021-11-10T18:19:55.070134Z"
    },
    "papermill": {
     "duration": 0.140111,
     "end_time": "2021-11-10T18:36:37.454982",
     "exception": false,
     "start_time": "2021-11-10T18:36:37.314871",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>weapon</th>\n",
       "      <th>Epee</th>\n",
       "      <th>Foil</th>\n",
       "      <th>Sabre</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>234</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1276</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1412</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1424</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1455</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "weapon   Epee   Foil  Sabre\n",
       "id                         \n",
       "234     False   True  False\n",
       "1276    False  False   True\n",
       "1412    False   True  False\n",
       "1424    False   True  False\n",
       "1455    False   True  False"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weapon_pts_indicators = fencer_rankings_df[fencer_rankings_df['points']!= 0].pivot_table(\n",
    "        index = \"id\", \n",
    "        columns = \"weapon\",\n",
    "        values = \"points\",\n",
    "        aggfunc = lambda x: not x.empty).fillna(False)\n",
    "weapon_pts_indicators.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d635a191",
   "metadata": {
    "papermill": {
     "duration": 0.051005,
     "end_time": "2021-11-10T18:36:37.558045",
     "exception": false,
     "start_time": "2021-11-10T18:36:37.507040",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now we can repeat the analysis from before using this modified classification of weapons. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "184b153f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:37.663596Z",
     "iopub.status.busy": "2021-11-10T18:36:37.662872Z",
     "iopub.status.idle": "2021-11-10T18:36:37.687520Z",
     "shell.execute_reply": "2021-11-10T18:36:37.688282Z",
     "shell.execute_reply.started": "2021-11-10T18:19:57.310098Z"
    },
    "papermill": {
     "duration": 0.079408,
     "end_time": "2021-11-10T18:36:37.688529",
     "exception": false,
     "start_time": "2021-11-10T18:36:37.609121",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>weapon</th>\n",
       "      <th>Epee</th>\n",
       "      <th>Foil</th>\n",
       "      <th>Sabre</th>\n",
       "      <th>foil pts only</th>\n",
       "      <th>foil pts and</th>\n",
       "      <th>no pts foil</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>234</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1276</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1412</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1424</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1455</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "weapon   Epee   Foil  Sabre  foil pts only  foil pts and  no pts foil\n",
       "id                                                                   \n",
       "234     False   True  False           True         False        False\n",
       "1276    False  False   True          False         False         True\n",
       "1412    False   True  False           True         False        False\n",
       "1424    False   True  False           True         False        False\n",
       "1455    False   True  False           True         False        False"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "foil pts only\n",
      "True             1241\n",
      "False              40\n",
      "dtype: int64\n",
      "foil pts and\n",
      "False           1270\n",
      "True              11\n",
      "dtype: int64\n",
      "no pts foil\n",
      "False          1252\n",
      "True             29\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# create boolean indicators for the categories of interest \n",
    "weapon_pts_indicators['foil pts only'] = ((weapon_pts_indicators['Foil'] == True) & (weapon_pts_indicators['Epee'] == False) & (weapon_pts_indicators['Sabre'] == False))\n",
    "weapon_pts_indicators['foil pts and']  = (weapon_pts_indicators['Foil'] == True) & ((weapon_pts_indicators['Epee'] == True) | (weapon_pts_indicators['Sabre'] == True))\n",
    "weapon_pts_indicators['no pts foil']   = (weapon_pts_indicators['Foil'] == False)\n",
    "display(weapon_pts_indicators.head(5))\n",
    "print(weapon_pts_indicators[['foil pts only']].value_counts())\n",
    "print(weapon_pts_indicators[['foil pts and']].value_counts())\n",
    "print(weapon_pts_indicators[['no pts foil']].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "3b00aa62",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:37.799407Z",
     "iopub.status.busy": "2021-11-10T18:36:37.798731Z",
     "iopub.status.idle": "2021-11-10T18:36:37.813240Z",
     "shell.execute_reply": "2021-11-10T18:36:37.813842Z",
     "shell.execute_reply.started": "2021-11-10T18:20:15.748171Z"
    },
    "papermill": {
     "duration": 0.072472,
     "end_time": "2021-11-10T18:36:37.814017",
     "exception": false,
     "start_time": "2021-11-10T18:36:37.741545",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>foil pts only</th>\n",
       "      <th>foil pts and</th>\n",
       "      <th>no pts foil</th>\n",
       "      <th>win_count</th>\n",
       "      <th>bout_count</th>\n",
       "      <th>win_percentage</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fencer_ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>234</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1276</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1412</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1424</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>6</td>\n",
       "      <td>12</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1455</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>91</td>\n",
       "      <td>177</td>\n",
       "      <td>0.514124</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           foil pts only  foil pts and  no pts foil  win_count  bout_count  \\\n",
       "fencer_ID                                                                    \n",
       "234                 True         False        False          6           6   \n",
       "1276               False         False         True          0           6   \n",
       "1412                True         False        False          1           3   \n",
       "1424                True         False        False          6          12   \n",
       "1455                True         False        False         91         177   \n",
       "\n",
       "           win_percentage  \n",
       "fencer_ID                  \n",
       "234              1.000000  \n",
       "1276             0.000000  \n",
       "1412             0.333333  \n",
       "1424             0.500000  \n",
       "1455             0.514124  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# join performance dataframe with the weapon indicators dataframe \n",
    "fencer_pts_stats = weapon_pts_indicators.merge(performance_stats.reset_index(), \n",
    "                                       how=\"inner\", left_on=\"id\", \n",
    "                                       right_on=\"fencer_ID\").set_index('fencer_ID').drop(columns=['Epee','Foil','Sabre'])\n",
    "fencer_pts_stats.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "e79db9a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:37.922610Z",
     "iopub.status.busy": "2021-11-10T18:36:37.921898Z",
     "iopub.status.idle": "2021-11-10T18:36:38.749732Z",
     "shell.execute_reply": "2021-11-10T18:36:38.750317Z",
     "shell.execute_reply.started": "2021-11-10T18:21:03.555556Z"
    },
    "papermill": {
     "duration": 0.883851,
     "end_time": "2021-11-10T18:36:38.750513",
     "exception": false,
     "start_time": "2021-11-10T18:36:37.866662",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 1440x360 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "fig, ax = plt.subplots(1,4, figsize=(20,5))\n",
    "\n",
    "fig.suptitle(\"Density Histograms of Pools Win Percentages by Fencer Weapon Classification\");\n",
    "bins = 15\n",
    "fencer_pts_stats['win_percentage'].hist(bins=bins, density=True, ax=ax[0]);\n",
    "ax[0].set_title(\"All Fencers\");\n",
    "ax[0].set_xlabel(\"Win Percentage\");\n",
    "ax[0].set_ylabel(\"Density\");\n",
    "fencer_pts_stats[fencer_pts_stats['foil pts only']==True]['win_percentage'].hist(bins=bins, density=True, ax=ax[1]);\n",
    "ax[1].set_title(\"Foil Only\");\n",
    "ax[1].set_xlabel(\"Win Percentage\");\n",
    "fencer_pts_stats[fencer_pts_stats['foil pts and']==True]['win_percentage'].hist(bins=bins, density=True, ax=ax[2]);\n",
    "ax[2].set_title(\"Foil and\");\n",
    "ax[2].set_xlabel(\"Win Percentage\");\n",
    "fencer_pts_stats[fencer_pts_stats['no pts foil']==True]['win_percentage'].hist(bins=bins, density=True, ax=ax[3]);\n",
    "ax[3].set_title(\"No Foil\");\n",
    "ax[3].set_xlabel(\"Win Percentage\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "53c7ce44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:38.873818Z",
     "iopub.status.busy": "2021-11-10T18:36:38.872581Z",
     "iopub.status.idle": "2021-11-10T18:36:39.113510Z",
     "shell.execute_reply": "2021-11-10T18:36:39.112963Z",
     "shell.execute_reply.started": "2021-11-10T18:21:47.377314Z"
    },
    "papermill": {
     "duration": 0.309478,
     "end_time": "2021-11-10T18:36:39.113663",
     "exception": false,
     "start_time": "2021-11-10T18:36:38.804185",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "\n",
    "fencer_pts_stats['weapon_category'] = fencer_pts_stats[['foil pts only','foil pts and','no pts foil']].idxmax(axis='columns')\n",
    "\n",
    "ax = sns.violinplot(data=fencer_pts_stats[['weapon_category','win_percentage']],\n",
    "                    x=\"weapon_category\", y=\"win_percentage\", inner=\"quartile\");\n",
    "ax.set_xlabel(\"Weapon Category\");\n",
    "ax.set_ylabel(\"Win Percentage\");\n",
    "ax.set_title(\"Violin Plots of Win Percentages by Weapon Points Classification\");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0008f9cc",
   "metadata": {
    "papermill": {
     "duration": 0.055158,
     "end_time": "2021-11-10T18:36:39.223852",
     "exception": false,
     "start_time": "2021-11-10T18:36:39.168694",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now that we have classified by points (not the presence of rankings), we see a visual difference between the three categories. Those fencers with no points in foil have a much lower distribution of win percentages, the fencers with foil points and points in foil and another weapon have similar means in win percentage, but those with foil and another weapon have a wider distribution and a longer to the right (higher win percentages).  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "22435bf1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:39.336746Z",
     "iopub.status.busy": "2021-11-10T18:36:39.336039Z",
     "iopub.status.idle": "2021-11-10T18:36:39.342097Z",
     "shell.execute_reply": "2021-11-10T18:36:39.341571Z"
    },
    "papermill": {
     "duration": 0.063523,
     "end_time": "2021-11-10T18:36:39.342240",
     "exception": false,
     "start_time": "2021-11-10T18:36:39.278717",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Split out the groups to perform permutation testing on \n",
    "foil_pts_only_win_percentages = fencer_pts_stats.loc[fencer_pts_stats[\"foil pts only\"],\"win_percentage\"]\n",
    "foil_pts_and_win_percentages = fencer_pts_stats.loc[fencer_pts_stats[\"foil pts and\"],\"win_percentage\"]\n",
    "no_pts_foil_win_percentages = fencer_pts_stats.loc[fencer_pts_stats[\"no pts foil\"],\"win_percentage\"]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "5775d31a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:39.457596Z",
     "iopub.status.busy": "2021-11-10T18:36:39.456866Z",
     "iopub.status.idle": "2021-11-10T18:36:39.465602Z",
     "shell.execute_reply": "2021-11-10T18:36:39.464954Z",
     "shell.execute_reply.started": "2021-11-10T18:33:35.746622Z"
    },
    "papermill": {
     "duration": 0.067648,
     "end_time": "2021-11-10T18:36:39.465755",
     "exception": false,
     "start_time": "2021-11-10T18:36:39.398107",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Difference in win-percentage mean between foil_pts_only and no_pts_foil:   0.2097\n",
      "Difference in win-percentage mean between foil_pts_and and foil_pts_only:  0.0802\n",
      "Difference in win-percentage mean between foil_pts_and and no_pts_foil:    0.2899\n"
     ]
    }
   ],
   "source": [
    "print(\"Difference in win-percentage mean between foil_pts_only and no_pts_foil:   \",end=\"\")\n",
    "print(\"{:.4f}\".format(mean_diff(foil_pts_only_win_percentages, no_pts_foil_win_percentages)))\n",
    "print(\"Difference in win-percentage mean between foil_pts_and and foil_pts_only:  \",end=\"\")\n",
    "print(\"{:.4f}\".format(mean_diff(foil_pts_and_win_percentages, foil_pts_only_win_percentages)))\n",
    "print(\"Difference in win-percentage mean between foil_pts_and and no_pts_foil:    \",end=\"\")\n",
    "print(\"{:.4f}\".format(mean_diff(foil_pts_and_win_percentages, no_pts_foil_win_percentages)))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "d13a0c02",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:36:39.595736Z",
     "iopub.status.busy": "2021-11-10T18:36:39.594744Z",
     "iopub.status.idle": "2021-11-10T18:36:42.132986Z",
     "shell.execute_reply": "2021-11-10T18:36:42.132307Z",
     "shell.execute_reply.started": "2021-11-10T18:35:19.157098Z"
    },
    "papermill": {
     "duration": 2.609852,
     "end_time": "2021-11-10T18:36:42.133136",
     "exception": false,
     "start_time": "2021-11-10T18:36:39.523284",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P-value from points permutation test (foil only vs no foil):  0.000000\n",
      "P-value from points permutation test (foil only vs foil and): 0.234000\n",
      "P-value from points permutation test (foil and vs no foil):   0.003000\n"
     ]
    }
   ],
   "source": [
    "results1 = permutation_test(foil_pts_only_win_percentages, no_pts_foil_win_percentages, mean_diff)\n",
    "print(\"P-value from points permutation test (foil only vs no foil):  {:.6f}\".format(3*results1[2]))\n",
    "\n",
    "results2 = permutation_test(foil_pts_only_win_percentages, foil_pts_and_win_percentages, mean_diff)\n",
    "print(\"P-value from points permutation test (foil only vs foil and): {:.6f}\".format(3*results2[2]))\n",
    "\n",
    "results3 = permutation_test(foil_pts_and_win_percentages, no_pts_foil_win_percentages, mean_diff)\n",
    "print(\"P-value from points permutation test (foil and vs no foil):   {:.6f}\".format(3*results3[2]))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea55f98f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-10T18:26:06.007254Z",
     "iopub.status.busy": "2021-11-10T18:26:06.006775Z",
     "iopub.status.idle": "2021-11-10T18:26:06.012267Z",
     "shell.execute_reply": "2021-11-10T18:26:06.011432Z",
     "shell.execute_reply.started": "2021-11-10T18:26:06.007202Z"
    },
    "papermill": {
     "duration": 0.057118,
     "end_time": "2021-11-10T18:36:42.246738",
     "exception": false,
     "start_time": "2021-11-10T18:36:42.189620",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "As we might expect from the violin plots above, there is a statistical difference in the means of the win percentages for fencers with no points in foil and both fencers with only points in foil and points in foil and another weapon. However there is no significant difference in mean between the two groups with points with foil (p~0.29). "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.10"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 24.770857,
   "end_time": "2021-11-10T18:36:43.236584",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2021-11-10T18:36:18.465727",
   "version": "2.3.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
